@inject HttpClient Http
@inject IMatToaster matToaster
@inject NavigationManager navigationManager
@inject AppState appState
@page "/player_cards"

<div class="card-list-container">
    @foreach (PlayerCard card in this.cards)
    {
        <div @onclick="() => NavigateToPlayerCard(card.Id)">
            <UICard Atk="@card.GetAtk()" Def="@card.GetDef()" Spd="@card.GetSpd()" Hp="@card.GetHp()" Imm="@card.GetImm()" Name="@card.GetName()" Element="@card.Card.Element"
                    Tier="@card.Card.Tier" Rarity="@card.Card.Rarity" AType="@card.Card.AtkType" ImgSrc="@card.Card.ImgSrc" Passives="@card.GetPassives()" Level="card.GetLevel()"></UICard>
        </div>
    }
</div>

@code {
    List<PlayerCard> cards = new List<PlayerCard>();
    protected override async Task OnInitializedAsync()
    {
        await GetUserCards();
    }

    private async Task GetUserCards()
    {
        ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>($"api/card/user");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Card List Retrieved");
            this.cards = Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerCard[]>(apiResponse.Result.ToString()).ToList<PlayerCard>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Todo List Retrieval Failed");
        }
    }

    private void NavigateToPlayerCard(int Id)
    {
        navigationManager.NavigateTo($"card_status/{Id}");
    }
}
