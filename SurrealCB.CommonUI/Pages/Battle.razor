@inject HttpClient Http
@inject IMatToaster matToaster
@page "/battle"
@page "/battle/{EnemyId}"


<div class="battle-container">
    @foreach (BattleCard card in this.cards)
    {
        <div class="battle-card @(nextPosition == card.Position ? "active" : "") battle-pos-@card.Position @(card.Hp == 0 ? "battle-death" : "") health-@GetHealthStatus(card)"
             @onclick="() => PlayerPerform(card.Position)">
            <UICard Atk="@card.GetAtk()" Def="@card.GetDef()" Spd="@card.GetSpd()" Hp="@card.Hp" Imm="@card.GetImm()" Name="@card.PlayerCard.GetName()"
                    Element="@card.PlayerCard.Card.Element" Tier="@card.PlayerCard.Card.Tier" Rarity="@card.PlayerCard.Card.Rarity" Level="card.PlayerCard.GetLevel()"
                    ImgSrc="@card.PlayerCard.Card.ImgSrc" Passives="@card.PlayerCard.GetPassives()" AType="card.PlayerCard.Card.AtkType"></UICard>
            <MatProgressBar Progress="@GetHpBar(card)"></MatProgressBar>
            <MatProgressBar Progress="@GetSpeedBar(card)" Class="speed-bar"></MatProgressBar>
            @if (Actions.Any(x => x.Position == card.Position))
            {
                if (Actions.FirstOrDefault(x => x.Position == card.Position).Type == HealthChange.DEATH)
                {
                    <div class="battle-card-dmg card-death">
                        <img src="_content/SurrealCB.CommonUI/icons/skull.svg">
                    </div>
                }
                else
                {
                    <div class="battle-card-dmg dmg-@Actions.FirstOrDefault(x => x.Position == card.Position).Type">
                        @Actions.FirstOrDefault(x => x.Position == card.Position).Number
                    </div>
                }
            }
            @if (card.Hp > 0 && card.ActiveEffects?.Count > 0)
            {
                <div class="battle-card-effects">
                    @foreach (var passive in card.ActiveEffects.Select(x => x.Passive))
                    {
                        <img class="icon-@PassiveHelper.GetPassiveTuple(passive).Item2" src="_content/SurrealCB.CommonUI/icons/@(PassiveHelper.GetPassiveTuple(passive).Item2).svg">
                    }
                </div>
            }
        </div>
    }

    <MatDialog IsOpen="@(battleStatus != BattleEnd.CONTINUE)">
        <MatDialogTitle>@GetDialogTitle()</MatDialogTitle>
        <MatDialogContent>
            <p>Rewards: </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton>Return To World</MatButton>
        </MatDialogActions>
    </MatDialog>
</div>

@code {
    [Parameter]
    public string EnemyId { get; set; }

    private int nextPosition { get; set; }

    private ICollection<BattleAction> Actions = new List<BattleAction>();

    private List<BattleCard> cards = new List<BattleCard>();

    private BattleEnd battleStatus = BattleEnd.CONTINUE;

    protected override async Task OnInitializedAsync()
    {
        await GetAllCards();
    }

    private async Task GetAllCards()
    {
        ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>($"api/battle/start/{EnemyId}");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Map List Retrieved");
            this.cards = Newtonsoft.Json.JsonConvert.DeserializeObject<BattleCard[]>(apiResponse.Result.ToString()).ToList<BattleCard>();

            await this.CheckNext();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Todo List Retrieval Failed");
        }
    }

    private async Task CheckNext()
    {
        ApiResponseDto nextResponse = await Http.PostJsonAsync<ApiResponseDto>($"api/battle/next", this.cards);
        var battleStatus = Newtonsoft.Json.JsonConvert.DeserializeObject<BattleStatus>(nextResponse.Result.ToString());
        this.cards = battleStatus.Cards.ToList();
        this.nextPosition = battleStatus.NextPosition;
        this.Actions = battleStatus.Actions;
        this.battleStatus = battleStatus.Status;
        if (this.Actions.Any())
        {
            StateHasChanged();
            await Task.Delay(1000);
        }
        if (this.nextPosition > 3)
        {
            StateHasChanged();
            var card = this.cards.FirstOrDefault(x => x.Position == this.nextPosition);
            var who = -1;
            if (card.PlayerCard.Card.AtkType != AtkType.ALL && card.PlayerCard.Card.AtkType != AtkType.RANDOM)
            {
                do
                {
                    var playerCardcount = this.cards.Where(x => x.Position < 4).Count();
                    var random = new Random();
                    who = random.Next(1, playerCardcount + 1) - 1;
                }
                while (this.cards.FirstOrDefault(x => x.Position == who).Hp == 0 && this.battleStatus == BattleEnd.CONTINUE);
            }
            if (card.PlayerCard.Card.AtkType == AtkType.HEAL)
            {
                who += 4;
            }
            ApiResponseDto atkResponse = await Http.PostJsonAsync<ApiResponseDto>($"api/battle/perform?srcPos={nextPosition}&tarPos={who}", this.cards);
            var newStatus = Newtonsoft.Json.JsonConvert.DeserializeObject<BattleStatus>(atkResponse.Result.ToString());
            await this.CheckStatus(newStatus);
        }
        else
        {
            var nextPlayerCard = this.cards.FirstOrDefault(x => x.Position == this.nextPosition);
            if (nextPlayerCard.PlayerCard.Card.AtkType == AtkType.RANDOM || nextPlayerCard.PlayerCard.Card.AtkType == AtkType.ALL)
            {
                ApiResponseDto atkResponse = await Http.PostJsonAsync<ApiResponseDto>($"api/battle/perform?srcPos={nextPosition}&tarPos={-1}", this.cards);
                var newStatus = Newtonsoft.Json.JsonConvert.DeserializeObject<BattleStatus>(atkResponse.Result.ToString());
                await this.CheckStatus(newStatus);
            }
        }
    }

    private async Task PlayerPerform(int pos)
    {
        if (this.nextPosition < 4 && this.nextPosition != -1)
        {
            var card = this.cards.FirstOrDefault(x => x.Position == pos);
            var mine = this.cards.FirstOrDefault(x => x.Position == this.nextPosition);
            if (card.Hp > 0 &&
                ((mine.PlayerCard.Card.AtkType == AtkType.NORMAL && pos > 3) ||
                (mine.PlayerCard.Card.AtkType == AtkType.HEAL && pos < 4)))
            {
                ApiResponseDto atkResponse = await Http.PostJsonAsync<ApiResponseDto>($"api/battle/perform?srcPos={nextPosition}&tarPos={pos}", this.cards);
                var newStatus = Newtonsoft.Json.JsonConvert.DeserializeObject<BattleStatus>(atkResponse.Result.ToString());
                await this.CheckStatus(newStatus);
            }
        }
    }

    private async Task CheckStatus(BattleStatus status)
    {
        this.cards = status.Cards.ToList();
        if (status.Actions?.Count() > 0)
        {
            var groupActions = status.Actions.GroupBy(x => x.Position).Select(x => x.First());
            do
            {
                this.Actions = groupActions.ToList();
                StateHasChanged();
                await Task.Delay(1500);
                foreach (var act in groupActions)
                {
                    status.Actions.Remove(act);
                }
                groupActions = status.Actions.GroupBy(x => x.Position).Select(x => x.First());
            }
            while (groupActions.Count() > 0);
            this.Actions.Clear();
        }
        this.nextPosition = status.NextPosition;
        this.battleStatus = status.Status;
        if (this.battleStatus == BattleEnd.CONTINUE)
        {
            await this.CheckNext();
        }
        else
        {
            ApiResponseDto atkResponse = await Http.GetJsonAsync<ApiResponseDto>($"api/battle/reward/{EnemyId}/");
        }
    }

    private string GetHealthStatus(BattleCard card)
    {
        var statusPerc = this.GetHpBar(card);
        return statusPerc switch
        {
            _ when statusPerc > 0.8 => "green",
            _ when statusPerc > 0.6 => "yellowgreen",
            _ when statusPerc > 0.4 => "yellow",
            _ when statusPerc > 0.2 => "orange",
            _ => "red",
        };
    }

    private double GetHpBar(BattleCard card)
    {
        if (card.Hp == 0) return 0;
        return (double)((double)card.Hp / (double)card.GetHp());
    }

    private double GetSpeedBar(BattleCard card)
    {
        if (card.Time == 0 || card.Hp == 0) return 0;
        return card.Time / card.GetSpd();
    }

    private string GetDialogTitle() =>
        this.battleStatus switch
        {
            BattleEnd.WIN => "You win",
            BattleEnd.LOSE => "You lose",
            BattleEnd.DRAW => "You draw",
            _ => "You win",
        };
}
