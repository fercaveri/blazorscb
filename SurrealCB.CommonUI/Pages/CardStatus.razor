@inject HttpClient Http
@inject IMatToaster matToaster
@page "/card_status"
@page "/card_status/{Id}"

<div class="card-status">
    @if (card != null)
    {
        <div class="status-left-panel">
            <UICard Atk="@card.GetAtk()" Def="@card.GetDef()" Spd="@card.GetSpd()" Hp="@card.GetHp()" Imm="@card.GetImm()" Name="@card.GetName()" Element="@card.Card.Element"
                    Tier="@card.Card.Tier" Rarity="@card.Card.Rarity" AType="@card.Card.AtkType" ImgSrc="@card.Card.ImgSrc" Passives="@card.GetPassives()" 
                    Level="card.GetLevel()" Runes="card.GetRuneList()"></UICard>
            <div>
                <p>Current Exp: @card.CurrentExp</p>
                <p>Next Level: @ExpHelper.GetNextLevelExp(card.Card.BaseExp, card.Card.Tier, card.CurrentExp)</p>
            </div>
        </div>
        <div class="card-status-levels" style="grid-template-columns: @GetLevelColumns()">
            @foreach (var levelBoost in card.Card.LevelBoosts.Where(x => x.Level != 1))
            {
                <div class="card-level-boost" style="grid-column: @(card.Card.LevelBoosts.Where(x => x.Level == levelBoost.Level).OrderBy(x => x.Cost).IndexOf(levelBoost) + 2);
                         grid-row: @GetGridRow(levelBoost.Level)" @onclick="() => ActivateBoost(levelBoost)">
                    <MatTooltip Tooltip="@GetBoostTooltip(levelBoost)">
                        <div @ref="@context.Current" class="boost-container @(card.ActiveLvlBoosts.Any(x => x.LevelBoost.Id == levelBoost.Id) ? $"active icon-{GetBoostIcon(levelBoost)}" : "") ">
                            <img class="boost-img" src="@($"_content/SurrealCB.CommonUI/icons/{GetBoostIcon(levelBoost)}.svg")" />
                        </div>
                    </MatTooltip>
                    @if (!card.ActiveLvlBoosts.Any(x => x.LevelBoost.Id == levelBoost.Id))
                    {
                        <div class="card-level-side">
                            <img src="_content/SurrealCB.CommonUI/icons/gold.svg" />
                            <span>@levelBoost.Cost</span>
                            @*@if (levelBoost.RequiredItems?.Any() == true)
                            {
                                <img src="_content/SurrealCB.CommonUI/icons/reward.svg" />
                            }*@
                        </div>
                    }
                </div>
            }
            @foreach (var level in card.Card.LevelBoosts.Select(x => x.Level).Distinct().OrderBy(x => x))
            {
                <div style="grid-row: @GetGridRow(level); grid-column: 1">
                    Level @level
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    PlayerCard card = null;

    protected override async Task OnInitializedAsync()
    {
        await GetPlayerCard();
    }

    private async Task GetPlayerCard()
    {
        ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>($"api/card/player/{Id}");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Card List Retrieved");
            this.card = Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerCard>(apiResponse.Result.ToString());
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Todo List Retrieval Failed");
        }
    }

    private async Task ActivateBoost(LevelBoost lb)
    {
        if (card.ActiveLvlBoosts.Any(x => x.LevelBoost.Id == lb.Id)) return;
        ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>($"api/card/player/levelboost/{Id}/{lb.Id}");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Level Boost Activated");
            this.card.ActiveLvlBoosts.Add(new ActiveLevelBoost { LevelBoost = lb});
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Todo List Retrieval Failed");
        }
    }

    private string GetLevelColumns()
    {
        var colCount = card.Card.LevelBoosts.GroupBy(x => x.Level).Max(g => g.Count());
        if (colCount == 1) return "50% 50%";
        else if (colCount == 2) return "33.3% 33.3% 33.3%";
        else if (colCount == 3) return "25% 25% 25% 25%";
        return "100%";
    }

    private int GetGridRow(int level)
    {
        var levels = this.card.Card.LevelBoosts.Select(x => x.Level).Distinct().OrderBy(x => x);
        return levels.IndexOf(level) + 1;
    }

    private string GetBoostIcon(LevelBoost boost)
    {
        var b = boost.Boost;
        if (b.Passives.FirstOrDefault() != null)
        {
            return PassiveHelper.GetPassiveTuple(b.Passives.FirstOrDefault().CardPassive.Passive).Item2;
        }
        //else if (b.Hp < 0 || b.Def < 0 || b.Spd < 0)
        else if (b.StatBoosts.Count > 1 && b.StatBoosts.Any(x => x.Amount < 0))
        {
            return "question";
        }
        //b.Hp != 0 && b.Def != 0
        else if (b.StatBoosts.Count > 1)
        {
            return "strenght";
        }
        else if (b.StatBoosts.FirstOrDefault().BoostType == BoostType.HP || b.StatBoosts.FirstOrDefault().BoostType == BoostType.HPPERC)
        {
            return "health";
        }
        else if (b.StatBoosts.FirstOrDefault().BoostType == BoostType.ATK || b.StatBoosts.FirstOrDefault().BoostType == BoostType.ATKPERC)
        {
            return "sword";
        }
        else if (b.StatBoosts.FirstOrDefault().BoostType == BoostType.DEF || b.StatBoosts.FirstOrDefault().BoostType == BoostType.DEFPERC)
        {
            return "shield";
        }
        else if (b.StatBoosts.FirstOrDefault().BoostType == BoostType.SPD || b.StatBoosts.FirstOrDefault().BoostType == BoostType.SPDPERC)
        {
            return "speed";
        }
        else if (b.StatBoosts.FirstOrDefault().BoostType == BoostType.IMM || b.StatBoosts.FirstOrDefault().BoostType == BoostType.IMMPERC)
        {
            return "wall";
        }
        //TODO: mixear iconos para mas de 1;
        return "";
    }

    private string GetBoostTooltip(LevelBoost lb)
    {
        var message = "";
        var stats = lb.Boost.StatBoosts;
        foreach (var boost in stats)
        {
            if (boost.BoostType == BoostType.HP || boost.BoostType == BoostType.HPPERC)
            {
                message += $"Hp +{boost.Amount}";
                if (boost.BoostType == BoostType.HPPERC) message += "%";
            }
            if (boost.BoostType == BoostType.ATK || boost.BoostType == BoostType.ATKPERC)
            {
                message += $"Atk +{boost.Amount}";
                if (boost.BoostType == BoostType.ATKPERC) message += "%";
            }
            if (boost.BoostType == BoostType.DEF || boost.BoostType == BoostType.DEFPERC)
            {
                message += $"Def +{boost.Amount}";
                if (boost.BoostType == BoostType.DEFPERC) message += "%";
            }
            if (boost.BoostType == BoostType.IMM || boost.BoostType == BoostType.IMMPERC)
            {
                message += $"Imm +{boost.Amount}%";
                if (boost.BoostType == BoostType.IMMPERC) message += "%";
            }
            if (boost.BoostType == BoostType.SPD || boost.BoostType == BoostType.SPDPERC)
            {
                message += $"Spd Improved {boost.Amount}";
                if (boost.BoostType == BoostType.SPDPERC) message += "%";
            }
            if (boost.BoostType == BoostType.PASSIVEPERC)
            {
                message += $"Passive Improved {boost.Amount}%";
            }
            message += " / ";
        }

        foreach (var p in lb.Boost.Passives.Select(x => x.CardPassive))
        {
            if (message != "") message += " / ";
            message += PassiveHelper.GetPassiveTuple(p.Passive, p.Param1, p.Param2, p.Param3).Item1;
        }
        return message;
    }
}
