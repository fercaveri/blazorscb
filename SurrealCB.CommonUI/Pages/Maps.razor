@inject HttpClient Http
@inject IMatToaster matToaster
@inject NavigationManager navigationManager
@page "/maps"


<div class="maps-container">
    @foreach (Map map in this.maps)
    {
        <div class="map-item map-@(map.Difficult) map-tier-@GetTier(map.MinLevel)" @onclick="() => StartBattle(map)">
            <img class="map-thumb" src="@(GetThumbnail(map.SrcImg))" />
            <div class="map-stats">
                <span class="map-name"> @map.Name</span>
                <div class="map-bottom-stats">
                    <span class="min-level"> @map.MinLevel</span>
                    <span class="map-difficult"> @map.Difficult.ToString()</span>
                    <span class="map-reward">
                        <MatTooltip Tooltip="@GetRewardTooltip(map)">
                            <img @ref="@context.Current" class="card-icon" src="_content/SurrealCB.CommonUI/icons/reward.svg" />
                        </MatTooltip>
                    </span>
                </div>
            </div>
            <!-- TODO: Hacer candado con tooltip de nivel o required monster etc-->
        </div>
    }
</div>

@code {
    List<Map> maps = new List<Map>();
    protected override async Task OnInitializedAsync()
    {
        await GetAllCards();
    }

    private async Task GetAllCards()
    {
        ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>("api/map/GetAll");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Map List Retrieved");
            this.maps = Newtonsoft.Json.JsonConvert.DeserializeObject<Map[]>(apiResponse.Result.ToString()).ToList<Map>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Todo List Retrieval Failed");
        }
    }

    private void StartBattle(Map map)
    {
        navigationManager.NavigateTo($"battle/{map.Enemies.FirstOrDefault().Id}");
    }

    private string GetTier(int minLevel)
    {
        return Math.Ceiling((double)minLevel / 5.0).ToString();
    }

    private string GetThumbnail(string img)
    {
        return img.Replace(".jpg", "_thumb.jpg");
    }

    private string GetRewardTooltip(Map map)
    {
        var reward = "Rewards: </br>";
        if (map.CompletionReward.Gold > 0)
        {
            reward += $"Gold: {map.CompletionReward.Gold} </br>";
        }
        if (map.CompletionReward.Exp > 0)
        {
            reward += $"Exp: { map.CompletionReward.Exp} </br>";
        }
        if (map.CompletionReward.Card != null)
        {
            reward += $"Card: {map.CompletionReward.Card.Name} </br>";
        }
        if (map.CompletionReward.Items != null && map.CompletionReward.Items.Any())
        {
            reward += $"Items: {string.Join(", ", map.CompletionReward.Items)}";
        }
        return reward;
    }

}
