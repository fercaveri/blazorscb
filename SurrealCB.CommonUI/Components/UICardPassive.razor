<MatTooltip Tooltip="@GetPassiveTuple().Item1">
    <div @ref="context.Current" class="uicard-passive">
        <div> <img class="card-icon passive-@GetPassiveTuple().Item2" src="@($"_content/SurrealCB.CommonUI/icons/{GetPassiveTuple().Item2}.svg")" /></div>
        @if (p1 != 0)
        {<div class="uicard-passive-param"> @(p1 + RenderPercentage())  </div>}
        @if (p2 != 0)
        {<div class="uicard-passive-param"> |@p2 </div>}
        @if (p3 != 0)
        {<div class="uicard-passive-param"> |@p3 </div>}
    </div>
</MatTooltip>

@code
{
    [Parameter]
    public CardPassive CPassive { get; set; }
    public Passive p => CPassive.Passive;
    public double p1 => CPassive.Param1;
    public double p2 => CPassive.Param2;
    public double p3 => CPassive.Param3;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    public Tuple<string, string> GetPassiveTuple() =>
        p switch
        {
            Passive.BLAZE => Tuple.Create($"Inflicts {p1} dmg every card turn for {p2} seconds.", "blaze"),
            Passive.DOOM => Tuple.Create($"Kill the card in {p1} seconds.", "doom"),
            Passive.FREEZE => Tuple.Create($"Slows the speed {p1} for {p2} seconds.", ""),
            Passive.HP_SHATTER => Tuple.Create($"Reduce {p1} of enemy total hp on every hit.", "hp_shatter"),
            Passive.HP_DEFRAGMENTER => Tuple.Create($"Reduce {p1} of enemy current hp on every hit.", "hp_defragmenter"),
            Passive.IGNORE_DEF => Tuple.Create($"Ignore entire enemy defense.", "ignore_defense"),
            Passive.PIERCING => Tuple.Create($"Ignore {p1} of defense on attack.", "piercing"),
            Passive.POISON => Tuple.Create($"Inflicts {p1} dmg every {p2} seconds for {p3} seconds.", "poison"),
            Passive.STUN => Tuple.Create($"Stun the target for {p1} seconds.", ""),
            Passive.BACKTRACK => Tuple.Create($"Backtrack the target speed for {p1} seconds.", ""),
            Passive.DODGE => Tuple.Create($"{p1}% chance of evasion.", "dodge"),
            _ => Tuple.Create("", ""),
        };

    public string RenderPercentage()
    {
        if (p == Passive.HP_SHATTER || p == Passive.HP_DEFRAGMENTER || p == Passive.DODGE) return "%";
        return "";
    }
}